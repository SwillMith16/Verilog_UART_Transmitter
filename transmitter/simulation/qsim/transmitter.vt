// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2023 23:33:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    transmitter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module transmitter_vlg_sample_tst(
	CLOCK_50,
	data_in,
	reset_n,
	send_n,
	sampler_tx
);
input  CLOCK_50;
input [6:0] data_in;
input  reset_n;
input  send_n;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or data_in or reset_n or send_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module transmitter_vlg_check_tst (
	baud_out,
	HEX2,
	HEX3,
	LEDG,
	load,
	parity_data,
	send_pulse,
	shift,
	sync_out1,
	sync_out2,
	UART_TXD,
	sampler_rx
);
input  baud_out;
input [6:0] HEX2;
input [6:0] HEX3;
input [1:0] LEDG;
input  load;
input [10:0] parity_data;
input  send_pulse;
input  shift;
input  sync_out1;
input  sync_out2;
input  UART_TXD;
input sampler_rx;

reg  baud_out_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [1:0] LEDG_expected;
reg  load_expected;
reg [10:0] parity_data_expected;
reg  send_pulse_expected;
reg  shift_expected;
reg  sync_out1_expected;
reg  sync_out2_expected;
reg  UART_TXD_expected;

reg  baud_out_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [1:0] LEDG_prev;
reg  load_prev;
reg [10:0] parity_data_prev;
reg  send_pulse_prev;
reg  shift_prev;
reg  sync_out1_prev;
reg  sync_out2_prev;
reg  UART_TXD_prev;

reg  sync_out1_expected_prev;
reg  sync_out2_expected_prev;

reg  last_sync_out1_exp;
reg  last_sync_out2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	baud_out_prev = baud_out;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	LEDG_prev = LEDG;
	load_prev = load;
	parity_data_prev = parity_data;
	send_pulse_prev = send_pulse;
	shift_prev = shift;
	sync_out1_prev = sync_out1;
	sync_out2_prev = sync_out2;
	UART_TXD_prev = UART_TXD;
end

// update expected /o prevs

always @(trigger)
begin
	sync_out1_expected_prev = sync_out1_expected;
	sync_out2_expected_prev = sync_out2_expected;
end



// expected sync_out1
initial
begin
	sync_out1_expected = 1'bX;
end 

// expected sync_out2
initial
begin
	sync_out2_expected = 1'bX;
end 
// generate trigger
always @(baud_out_expected or baud_out or HEX2_expected or HEX2 or HEX3_expected or HEX3 or LEDG_expected or LEDG or load_expected or load or parity_data_expected or parity_data or send_pulse_expected or send_pulse or shift_expected or shift or sync_out1_expected or sync_out1 or sync_out2_expected or sync_out2 or UART_TXD_expected or UART_TXD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected baud_out = %b | expected HEX2 = %b | expected HEX3 = %b | expected LEDG = %b | expected load = %b | expected parity_data = %b | expected send_pulse = %b | expected shift = %b | expected sync_out1 = %b | expected sync_out2 = %b | expected UART_TXD = %b | ",baud_out_expected_prev,HEX2_expected_prev,HEX3_expected_prev,LEDG_expected_prev,load_expected_prev,parity_data_expected_prev,send_pulse_expected_prev,shift_expected_prev,sync_out1_expected_prev,sync_out2_expected_prev,UART_TXD_expected_prev);
	$display("| real baud_out = %b | real HEX2 = %b | real HEX3 = %b | real LEDG = %b | real load = %b | real parity_data = %b | real send_pulse = %b | real shift = %b | real sync_out1 = %b | real sync_out2 = %b | real UART_TXD = %b | ",baud_out_prev,HEX2_prev,HEX3_prev,LEDG_prev,load_prev,parity_data_prev,send_pulse_prev,shift_prev,sync_out1_prev,sync_out2_prev,UART_TXD_prev);
`endif
	if (
		( sync_out1_expected_prev !== 1'bx ) && ( sync_out1_prev !== sync_out1_expected_prev )
		&& ((sync_out1_expected_prev !== last_sync_out1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sync_out1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sync_out1_expected_prev);
		$display ("     Real value = %b", sync_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_sync_out1_exp = sync_out1_expected_prev;
	end
	if (
		( sync_out2_expected_prev !== 1'bx ) && ( sync_out2_prev !== sync_out2_expected_prev )
		&& ((sync_out2_expected_prev !== last_sync_out2_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sync_out2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sync_out2_expected_prev);
		$display ("     Real value = %b", sync_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sync_out2_exp = sync_out2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#500000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module transmitter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [6:0] data_in;
reg reset_n;
reg send_n;
// wires                                               
wire baud_out;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [1:0] LEDG;
wire load;
wire [10:0] parity_data;
wire send_pulse;
wire shift;
wire sync_out1;
wire sync_out2;
wire UART_TXD;

wire sampler;                             

// assign statements (if any)                          
transmitter i1 (
// port map - connection between master ports and signals/registers   
	.baud_out(baud_out),
	.CLOCK_50(CLOCK_50),
	.data_in(data_in),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.LEDG(LEDG),
	.load(load),
	.parity_data(parity_data),
	.reset_n(reset_n),
	.send_n(send_n),
	.send_pulse(send_pulse),
	.shift(shift),
	.sync_out1(sync_out1),
	.sync_out2(sync_out2),
	.UART_TXD(UART_TXD)
);

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #10000 1'b1;
	#10000;
end 

// send_n
initial
begin
	send_n = 1'b1;
	send_n = #30000 1'b0;
	send_n = #20000 1'b1;
	send_n = #140000 1'b0;
	send_n = #100000 1'b1;
end 

transmitter_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.data_in(data_in),
	.reset_n(reset_n),
	.send_n(send_n),
	.sampler_tx(sampler)
);

transmitter_vlg_check_tst tb_out(
	.baud_out(baud_out),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.LEDG(LEDG),
	.load(load),
	.parity_data(parity_data),
	.send_pulse(send_pulse),
	.shift(shift),
	.sync_out1(sync_out1),
	.sync_out2(sync_out2),
	.UART_TXD(UART_TXD),
	.sampler_rx(sampler)
);
endmodule

