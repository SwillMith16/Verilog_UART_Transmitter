// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2023 20:48:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    tx_shift_register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tx_shift_register_vlg_sample_tst(
	clk,
	data_in,
	load,
	reset_n,
	shift,
	sampler_tx
);
input  clk;
input [10:0] data_in;
input  load;
input  reset_n;
input  shift;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data_in or load or reset_n or shift)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module tx_shift_register_vlg_check_tst (
	txData,
	sampler_rx
);
input  txData;
input sampler_rx;

reg  txData_expected;

reg  txData_prev;

reg  txData_expected_prev;

reg  last_txData_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	txData_prev = txData;
end

// update expected /o prevs

always @(trigger)
begin
	txData_expected_prev = txData_expected;
end



// expected txData
initial
begin
	txData_expected = 1'bX;
end 
// generate trigger
always @(txData_expected or txData)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected txData = %b | ",txData_expected_prev);
	$display("| real txData = %b | ",txData_prev);
`endif
	if (
		( txData_expected_prev !== 1'bx ) && ( txData_prev !== txData_expected_prev )
		&& ((txData_expected_prev !== last_txData_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port txData :: @time = %t",  $realtime);
		$display ("     Expected value = %b", txData_expected_prev);
		$display ("     Real value = %b", txData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_txData_exp = txData_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module tx_shift_register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [10:0] data_in;
reg load;
reg reset_n;
reg shift;
// wires                                               
wire txData;

wire sampler;                             

// assign statements (if any)                          
tx_shift_register i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_in(data_in),
	.load(load),
	.reset_n(reset_n),
	.shift(shift),
	.txData(txData)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
	reset_n = #710000 1'b0;
	reset_n = #20000 1'b1;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b1;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b0;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b1;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b1;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b1;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b1;
end 

// load
initial
begin
	load = 1'b0;
	load = #30000 1'b1;
	load = #20000 1'b0;
	load = #460000 1'b1;
	load = #20000 1'b0;
end 

// shift
initial
begin
	shift = 1'b0;
	shift = #50000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #100000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
	shift = #20000 1'b1;
	shift = #20000 1'b0;
end 

tx_shift_register_vlg_sample_tst tb_sample (
	.clk(clk),
	.data_in(data_in),
	.load(load),
	.reset_n(reset_n),
	.shift(shift),
	.sampler_tx(sampler)
);

tx_shift_register_vlg_check_tst tb_out(
	.txData(txData),
	.sampler_rx(sampler)
);
endmodule

