// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2023 20:47:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    tx_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tx_controller_vlg_sample_tst(
	baud,
	clk,
	count_done,
	reset_n,
	send,
	sampler_tx
);
input  baud;
input  clk;
input  count_done;
input  reset_n;
input  send;
output sampler_tx;

reg sample;
time current_time;
always @(baud or clk or count_done or reset_n or send)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module tx_controller_vlg_check_tst (
	load,
	shift,
	sampler_rx
);
input  load;
input  shift;
input sampler_rx;

reg  load_expected;
reg  shift_expected;

reg  load_prev;
reg  shift_prev;

reg  load_expected_prev;
reg  shift_expected_prev;

reg  last_load_exp;
reg  last_shift_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	load_prev = load;
	shift_prev = shift;
end

// update expected /o prevs

always @(trigger)
begin
	load_expected_prev = load_expected;
	shift_expected_prev = shift_expected;
end



// expected load
initial
begin
	load_expected = 1'bX;
end 

// expected shift
initial
begin
	shift_expected = 1'bX;
end 
// generate trigger
always @(load_expected or load or shift_expected or shift)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected load = %b | expected shift = %b | ",load_expected_prev,shift_expected_prev);
	$display("| real load = %b | real shift = %b | ",load_prev,shift_prev);
`endif
	if (
		( load_expected_prev !== 1'bx ) && ( load_prev !== load_expected_prev )
		&& ((load_expected_prev !== last_load_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port load :: @time = %t",  $realtime);
		$display ("     Expected value = %b", load_expected_prev);
		$display ("     Real value = %b", load_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_load_exp = load_expected_prev;
	end
	if (
		( shift_expected_prev !== 1'bx ) && ( shift_prev !== shift_expected_prev )
		&& ((shift_expected_prev !== last_shift_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_expected_prev);
		$display ("     Real value = %b", shift_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_shift_exp = shift_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module tx_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg baud;
reg clk;
reg count_done;
reg reset_n;
reg send;
// wires                                               
wire load;
wire shift;

wire sampler;                             

// assign statements (if any)                          
tx_controller i1 (
// port map - connection between master ports and signals/registers   
	.baud(baud),
	.clk(clk),
	.count_done(count_done),
	.load(load),
	.reset_n(reset_n),
	.send(send),
	.shift(shift)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
end 

// send
initial
begin
	send = 1'b0;
	send = #50000 1'b1;
	send = #20000 1'b0;
end 

// baud
initial
begin
	baud = 1'b0;
	# 10000;
	repeat(24)
	begin
		baud = 1'b1;
		baud = #20000 1'b0;
		# 20000;
	end
	baud = 1'b1;
	baud = #20000 1'b0;
end 

// count_done
initial
begin
	count_done = 1'b0;
	count_done = #410000 1'b1;
	count_done = #20000 1'b0;
end 

tx_controller_vlg_sample_tst tb_sample (
	.baud(baud),
	.clk(clk),
	.count_done(count_done),
	.reset_n(reset_n),
	.send(send),
	.sampler_tx(sampler)
);

tx_controller_vlg_check_tst tb_out(
	.load(load),
	.shift(shift),
	.sampler_rx(sampler)
);
endmodule

